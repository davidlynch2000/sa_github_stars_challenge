{"version":3,"sources":["starWarsLogo.png","RepoFilters.js","Repo.js","RepoList.js","RepoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RepoFilters","allLanguages","setSelectedLanguage","onlyStarredRepos","setOnlyStarredRepos","htmlFor","className","name","id","onChange","e","target","value","map","language","type","checked","Repo","idx","starred","starAndIncrementRepo","unstarAndDecrementRepo","url","description","starCount","data-testid","icon","selectedStar","onClick","hollowStar","href","rel","RepoList","selectedLanguage","useState","JSON","parse","sessionStorage","getItem","githubWeeklyTrendingRepos","setGithubWeeklyTrendingRepos","prevStarredRepos","starredRepos","filter","item","RepoContainer","setAllLanguages","useEffect","a","curDate","Date","oneWeekAgo","fetch","getFullYear","getMonth","getDate","data","json","Set","items","setItem","stringify","html_url","stargazers_count","fetchTheRepos","App","src","starWarsLogo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAAe,G,MAAA,IAA0B,0C,+CCwD1BA,G,MArDK,SAAC,GAKd,IAJHC,EAIE,EAJFA,aACAC,EAGE,EAHFA,oBACAC,EAEE,EAFFA,iBACAC,EACE,EADFA,oBASA,OACI,qCACI,uBACIC,QAAQ,WACRC,UAAU,oBAFd,yDAMA,yBACIC,KAAK,WACLC,GAAG,WACHC,SAlBe,SAACC,GACxBR,EAAoBQ,EAAEC,OAAOC,QAkBrBN,UAAU,+BAJd,UAQI,wBAAQM,MAAO,GAAf,gBAAuB,IACtBX,EAAaY,KAAI,SAAAC,GACd,OACI,wBAAQF,MAAOE,EAAf,SAAyCA,GAAXA,SAI1C,uBACIR,UAAU,oBACVD,QAAQ,mBAFZ,iCAMA,uBACIU,KAAK,WACLR,KAAK,mBACLC,GAAG,mBACHQ,QAASb,EACTM,SArCiB,SAACC,GAC1BN,EAAoBM,EAAEC,OAAOK,iB,+BC0DtBC,G,MAlEF,SAAC,GAWH,IATHC,EASE,EATFA,IACAC,EAQE,EARFA,QACAC,EAOE,EAPFA,qBACAC,EAME,EANFA,uBACAd,EAKE,EALFA,KACAe,EAIE,EAJFA,IACAC,EAGE,EAHFA,YACAC,EAEE,EAFFA,UACAV,EACE,EADFA,SAWJ,OACI,qBAAIR,UAAU,gCAAd,UACI,sBAAKA,UAAU,sCAAf,UACI,sBAAMA,UAAU,uBAAuBmB,cAAY,cAAnD,SACKN,EACG,cAAC,IAAD,CACIO,KAAMC,IACNrB,UAAU,8BACVsB,QAhBS,WAC7BP,EAAuBH,MAkBP,cAAC,IAAD,CACIQ,KAAMG,IACNvB,UAAU,4BACVsB,QAlBO,WAC3BR,EAAqBF,QAqBb,sBAAMO,cAAY,kBAAlB,SACI,oBACIK,KAAMR,EACNX,OAAO,SACPoB,IAAI,aACJzB,UAAU,2BAJd,UAMKC,EAAMO,EAAQ,YAAQA,EAAR,KAAsB,WAIjD,qBACIR,UAAU,6BACVmB,cAAY,qBAFhB,SAIKF,IAEL,sBACIjB,UAAU,2BACVmB,cAAY,mBAFhB,UAIKD,EAJL,iBCGGQ,G,MA5DE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,iBAAkB9B,EAAuB,EAAvBA,iBAAuB,EACS+B,mBAC9DC,KAAKC,MAAMC,eAAeC,QAAQ,+BAC/B,IAHkD,mBAClDC,EADkD,KACvBC,EADuB,KAMnDpB,EAAuB,SAACF,GAC1BsB,GAA6B,SAAAC,GAEzB,IAAMC,EAAY,YAAOD,GAOzB,OALAC,EAAaxB,GAAb,2BACOwB,EAAaxB,IADpB,IAEIC,SAAS,EACTK,UAAWkB,EAAaxB,GAAKM,UAAY,IAEtCkB,MAITrB,EAAyB,SAACH,GAC5BsB,GAA6B,SAAAC,GAEzB,IAAMC,EAAY,YAAOD,GAOzB,OALAC,EAAaxB,GAAb,2BACOwB,EAAaxB,IADpB,IAEIC,SAAS,EACTK,UAAWkB,EAAaxB,GAAKM,UAAY,IAEtCkB,MAIf,OACI,oBAAIpC,UAAU,YAAYmB,cAAY,kBAAtC,SACKc,EAA0BI,QAAO,SAAAC,GAC9B,OAAQA,EAAK9B,WAAamB,GAAyC,KAArBA,KAC/CU,QAAO,SAAAC,GACN,OAASzC,GAAoByC,EAAKzB,UAAYhB,KAC/CU,KAAI,SAAC+B,EAAM1B,GACV,OACI,cAAC,EAAD,CAEIA,IAAK0B,EAAK1B,IACVC,QAASyB,EAAKzB,QACdC,qBAAsBA,EACtBC,uBAAwBA,EACxBd,KAAMqC,EAAKrC,KACXe,IAAKsB,EAAKtB,IACVC,YAAaqB,EAAKrB,aAAe,0BACjCC,UAAWoB,EAAKpB,UAChBV,SAAU8B,EAAK9B,UAVnB,UACYI,EADZ,YACmB0B,EAAKtB,aCwB7BuB,G,MAnEO,WAAO,IAAD,EACwBX,mBAAS,IADjC,mBACjBD,EADiB,KACC/B,EADD,OAEwBgC,oBAAS,GAFjC,mBAEjB/B,EAFiB,KAECC,EAFD,OAGgB8B,mBAAS,IAHzB,mBAGjBjC,EAHiB,KAGH6C,EAHG,KAyCxB,OApCAC,qBAAU,YACa,uCAAG,kCAAAC,EAAA,6DACW,OACzBC,EAAU,IAAIC,KACdC,EAAa,IAAID,KAAKD,EAFG,QADX,SAKDG,MAAM,+DAAD,OAC6CD,EAAWE,cADxD,YACyEF,EAAWG,WAAa,EADjG,YACsGH,EAAWI,UADjH,2BALJ,cAKdC,EALc,gBAQDA,EAAKC,OARJ,OAQdA,EARc,OAalBX,EAAgB,YAAI,IAAIY,IACpBD,EAAKE,MACAhB,QAAO,SAAAC,GAAI,OAAIA,EAAK9B,YACpBD,KAAI,SAAA+B,GAAI,OAAIA,EAAK9B,eAI1BuB,eAAeuB,QAAQ,4BAA6BzB,KAAK0B,UAAUJ,EAAKE,MAAM9C,KAAI,SAAC+B,EAAM1B,GACrF,MAAO,CACHA,IAAKA,EACLC,SAAS,EACTZ,KAAMqC,EAAKrC,KACXe,IAAKsB,EAAKkB,SACVvC,YAAaqB,EAAKrB,YAClBC,UAAWoB,EAAKmB,iBAChBjD,SAAU8B,EAAK9B,eA5BL,4CAAH,qDAgCnBkD,KACD,IAGC,sBAAK1D,UAAU,qBAAqBmB,cAAY,qBAAhD,UACI,iCACI,oBAAInB,UAAU,uBAAuBmB,cAAY,kBAAjD,gEAIJ,yBAASnB,UAAU,eAAemB,cAAY,UAA9C,SACI,cAAC,EAAD,CACIvB,oBAAqBA,EACrB+B,iBAAkBA,EAClBhC,aAAcA,EACdE,iBAAkBA,EAClBC,oBAAqBA,MAG7B,yBAASqB,cAAY,kBAArB,SACI,cAAC,EAAD,CACIQ,iBAAkBA,EAClB9B,iBAAkBA,WC3CvB8D,MAlBf,WAEE,OACE,qCACE,wBAAQ3D,UAAU,aAAlB,SACE,qBACE4D,IAAKC,EACLC,IAAI,8BACJ9D,UAAU,wBACVmB,cAAY,4BAIhB,cAAC,EAAD,QCLS4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c600217a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/starWarsLogo.97d3c6e9.png\";","import React from 'react';\nimport './RepoFilters.css';\n\nconst RepoFilters = ({\n    allLanguages,\n    setSelectedLanguage,\n    onlyStarredRepos,\n    setOnlyStarredRepos\n}) => {\n    const handleSelectChange = (e) => {\n        setSelectedLanguage(e.target.value);\n    }\n\n    const handleCheckboxChange = (e) => {\n        setOnlyStarredRepos(e.target.checked);\n    }\n    return (\n        <>\n            <label\n                htmlFor=\"language\"\n                className=\"repoFilters_label\"\n            >\n                Filter by selecting a programming language:\n            </label>\n            <select\n                name=\"language\"\n                id=\"language\"\n                onChange={handleSelectChange}\n                className=\"repoFilters_languageDropdown\"\n            >\n                {/* set the value for all languages. All other options\n                    will come from github */}\n                <option value={''} key=''>All</option>\n                {allLanguages.map(language => {\n                    return (\n                        <option value={language} key={language}>{language}</option>\n                    );\n                })}\n            </select>\n            <label\n                className='repoFilters_label'\n                htmlFor=\"onlyStarredRepos\"\n            >\n                Only starred repos?\n            </label>\n            <input\n                type='checkbox'\n                name=\"onlyStarredRepos\"\n                id=\"onlyStarredRepos\"\n                checked={onlyStarredRepos}\n                onChange={handleCheckboxChange}\n            />\n        </>\n    );\n}\n\nexport default RepoFilters;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar as hollowStar } from '@fortawesome/fontawesome-free-regular';\nimport { faStar as selectedStar } from '@fortawesome/fontawesome-free-solid';\nimport \"./Repo.css\";\n\nconst Repo = (\n    {\n        idx,\n        starred,\n        starAndIncrementRepo,\n        unstarAndDecrementRepo,\n        name,\n        url,\n        description,\n        starCount,\n        language\n    }) => {\n\n    const selectedStarClickHandler = () => {\n        unstarAndDecrementRepo(idx);\n    }\n\n    const hollowStarClickHandler = () => {\n        starAndIncrementRepo(idx);\n    }\n\n    return (\n        <li className=\"repositoryItem_repositoryItem\">\n            <div className='repositoryItem_starTitleAndLanguage'>\n                <span className=\"repositoryItem_stars\" data-testid=\"starSection\">\n                    {starred ?\n                        <FontAwesomeIcon\n                            icon={selectedStar}\n                            className=\"repositoryItem_selectedStar\"\n                            onClick={selectedStarClickHandler}\n                        />\n                        :\n                        <FontAwesomeIcon\n                            icon={hollowStar}\n                            className=\"repositoryItem_hollowStar\"\n                            onClick={hollowStarClickHandler}\n                        />\n                    }\n                </span>\n                <span data-testid=\"repoNameAndLink\">\n                    <a\n                        href={url}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        className=\"repositoryItem_linkColor\"\n                    >\n                        {name}{language ? ` (${language})` : ''}\n                    </a>\n                </span>\n            </div>\n            <div\n                className='repositoryItem_description'\n                data-testid=\"descriptionSection\"\n            >\n                {description}\n            </div>\n            <div\n                className='repositoryItem_starCount'\n                data-testid=\"starCountSection\"\n            >\n                {starCount} stars\n            </div>\n        </li>\n    );\n}\n\nexport default Repo;","import React, { useState } from 'react';\nimport Repo from './Repo';\nimport './RepoList.css';\n\n\nconst RepoList = ({ selectedLanguage, onlyStarredRepos }) => {\n    const [githubWeeklyTrendingRepos, setGithubWeeklyTrendingRepos] = useState(\n        JSON.parse(sessionStorage.getItem(\"githubWeeklyTrendingRepos\"))\n        || []\n    );\n\n    const starAndIncrementRepo = (idx) => {\n        setGithubWeeklyTrendingRepos(prevStarredRepos => {\n            // copy to avoid mutating\n            const starredRepos = [...prevStarredRepos];\n            // optimistic update and doesn't handle error state\n            starredRepos[idx] = {\n                ...starredRepos[idx],\n                starred: true,\n                starCount: starredRepos[idx].starCount + 1,\n            };\n            return starredRepos;\n        });\n    }\n\n    const unstarAndDecrementRepo = (idx) => {\n        setGithubWeeklyTrendingRepos(prevStarredRepos => {\n            // copy to avoid mutating\n            const starredRepos = [...prevStarredRepos];\n            // optimistic update and doesn't handle error state\n            starredRepos[idx] = {\n                ...starredRepos[idx],\n                starred: false,\n                starCount: starredRepos[idx].starCount - 1,\n            };\n            return starredRepos;\n        });\n    }\n\n    return (\n        <ul className=\"repo_list\" data-testid=\"repoListElement\">\n            {githubWeeklyTrendingRepos.filter(item => {\n                return (item.language === selectedLanguage || selectedLanguage === '');\n            }).filter(item => {\n                return (!onlyStarredRepos || item.starred === onlyStarredRepos)\n            }).map((item, idx) => {\n                return (\n                    <Repo\n                        key={`${idx}_${item.url}`}\n                        idx={item.idx}\n                        starred={item.starred}\n                        starAndIncrementRepo={starAndIncrementRepo}\n                        unstarAndDecrementRepo={unstarAndDecrementRepo}\n                        name={item.name}\n                        url={item.url}\n                        description={item.description || 'No description provided'}\n                        starCount={item.starCount}\n                        language={item.language}\n                    />\n                );\n            })}\n        </ul>\n    )\n}\n\nexport default RepoList;","import React, { useState, useEffect } from 'react';\nimport RepoFilters from './RepoFilters';\nimport RepoList from './RepoList';\nimport './RepoContainer.css';\n\nconst RepoContainer = () => {\n    const [selectedLanguage, setSelectedLanguage] = useState('');\n    const [onlyStarredRepos, setOnlyStarredRepos] = useState(false);\n    const [allLanguages, setAllLanguages] = useState([]);\n\n    useEffect(() => {\n        const fetchTheRepos = async () => {\n            const WEEK_IN_MILLISECONDS = 7 * 24 * 60 * 60 * 1000;\n            let curDate = new Date();\n            let oneWeekAgo = new Date(curDate - WEEK_IN_MILLISECONDS);\n            // In javascript, months are 0 indexed, so we have to add one to the return\n            let data = await fetch(\n                `https://api.github.com/search/repositories?q=created:%3A>%3D${oneWeekAgo.getFullYear()}-${oneWeekAgo.getMonth() + 1}-${oneWeekAgo.getDate()}&sort=stars&order=desc`\n            );\n            let json = await data.json();\n\n            // gets an array of all unique languages by using the filter method to eliminate the null values, \n            // then deduplicates by transforming the non-null values to a set and then back to an array.\n            // TODO: Some languages are being returned that don't seem to be associated with any repos...\n            setAllLanguages([...new Set(\n                json.items\n                    .filter(item => item.language)\n                    .map(item => item.language)\n            )]);\n            // doesn't check for existence in sessionStorage, since we want users to be able to star a fresh set of repos\n            // on every refresh\n            sessionStorage.setItem('githubWeeklyTrendingRepos', JSON.stringify(json.items.map((item, idx) => {\n                return {\n                    idx: idx,\n                    starred: false,\n                    name: item.name,\n                    url: item.html_url,\n                    description: item.description,\n                    starCount: item.stargazers_count,\n                    language: item.language,\n                }\n            })));\n        }\n        fetchTheRepos();\n    }, []);\n\n    return (\n        <div className=\"componentContainer\" data-testid=\"componentContainer\">\n            <header>\n                <h3 className=\"repo_componentHeader\" data-testid=\"componentHeader\">\n                    Click The Stars Of Your Favorite Trending Repos!\n                </h3>\n            </header>\n            <section className='repo_filters' data-testid=\"filters\">\n                <RepoFilters\n                    setSelectedLanguage={setSelectedLanguage}\n                    selectedLanguage={selectedLanguage}\n                    allLanguages={allLanguages}\n                    onlyStarredRepos={onlyStarredRepos}\n                    setOnlyStarredRepos={setOnlyStarredRepos}\n                />\n            </section>\n            <section data-testid=\"repoListSection\">\n                <RepoList\n                    selectedLanguage={selectedLanguage}\n                    onlyStarredRepos={onlyStarredRepos}\n                />\n            </section>\n        </div>\n    );\n}\n\nexport default RepoContainer;","import starWarsLogo from './starWarsLogo.png';\nimport './App.css';\nimport RepoContainer from './RepoContainer';\n\nfunction App() {\n\n  return (\n    <>\n      <header className=\"App-header\">\n        <img\n          src={starWarsLogo}\n          alt='Star Wars: The Github Repos'\n          className=\"pageHeader_titleImage\"\n          data-testid=\"pageHeader_titleImage\"\n        />\n\n      </header>\n      <RepoContainer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}